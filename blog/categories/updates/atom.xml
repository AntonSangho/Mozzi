<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: updates | MOZZI]]></title>
  <link href="http://sensorium.github.io/Mozzi//blog/categories/updates/atom.xml" rel="self"/>
  <link href="http://sensorium.github.io/Mozzi//"/>
  <updated>2018-02-05T22:28:07+11:00</updated>
  <id>http://sensorium.github.io/Mozzi//</id>
  <author>
    <name><![CDATA[Tim Barrass]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Howto for Arduino 1.6.11]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2016/09/09/howto-for-arduino-1-dot-6-11/"/>
    <updated>2016-09-09T21:48:00+10:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2016/09/09/howto-for-arduino-1-dot-6-11</id>
    <content type="html"><![CDATA[<p>Now Mozzi can work at full speed on the latest Arduino IDE.  It works, but now Mozzi needs an update to install smoothly in recent IDE's.  Coming soon, with some other fixes.</p>

<p>The problem for Mozzi on Arduino IDE's after 1.0.5 used to be that sketches were compiled for small size instead of speed, but now the compiler optimations can be edited.</p>

<p>Here's how you do it.  Find Arduino's platform.txt (on OSX you can find it by searching in Users/your_name/Library/Arduino15).  Search and replace -Os with -O2.  Save.</p>

<p>It's explained more thoroughly (for Windows) here:
http://www.instructables.com/id/Arduino-IDE-16x-compiler-optimisations-faster-code/?ALLSTEPS</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[STANDARD_PLUS performance improves]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2014/04/20/standard-plus-performance-improves/"/>
    <updated>2014-04-20T15:16:00+10:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2014/04/20/standard-plus-performance-improves</id>
    <content type="html"><![CDATA[<p>Due to recent improvements in output buffer code, STANDARD_PLUS audio mode is now the default, and performs as well as the old STANDARD mode,
while removing the high-pitched PWM carrier frequency whine out of hearing range.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New STANDARD_PLUS audio mode removes 16kHz whine]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2014/03/13/update-to-version-2014-03-13-14-09/"/>
    <updated>2014-03-13T14:16:00+11:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2014/03/13/update-to-version-2014-03-13-14-09</id>
    <content type="html"><![CDATA[<p>Took a long time coming...</p>

<p>version 2014-03-13-14:09</p>

<ul>
<li>MozziGuts.cpp/h,mozzi_config.h - Added STANDARD_PLUS audio mode.   This is now the default audio mode.
  Just like STANDARD, but with 32768Hz PWM rate, so the whine which some people hear in STANDARD mode is now out of hearing range.
  A notch filter is not required for STANDARD_PLUS output.
  STANDARD_PLUS introduces a slight performance penalty over STANDARD mode, but works for most of the Mozzi demo examples.
  I recommend it for general use, with a fall back to STANDARD for more demanding sketches.
  HIFI mode is unchanged, but is being revised to address broad-spectrum noise/distortion issues in this mode.</li>
<li>TimerOne.h - changed initialize(usecs) to choice of initializeMicroseconds(usecs) or initializeCPUCycles(cycles),
  providing the finer resolution required for the PWM rate increase.</li>
<li>FrequencyTimer2.cpp - changed setPeriod to setPeriodMicroSeconds() and added setPeriodCPUCycles().</li>
<li>examples/02.Control/Line_Gliss_Double_32k_HIFI - changed "warmtriangle" wave to saw and changed one of the oscils up an octave.  Molto Aggressivo.  Almost.</li>
<li>examples/10.Audio_Filters/StateVariableFilter - changed some floats which were supposed to be ints</li>
<li>StateVariable.h - removed a clicking sound heard in some situations, thanks to diligent problem-finding by qwester1 on github.  Cheers qwester1.<br/>
The centre frequency calculation is still extremely approximate.  Needs more work.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simpler adc with mozziAnalogRead]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2013/08/25/simpler-adc-with-mozzianalogread/"/>
    <updated>2013-08-25T21:20:00+10:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2013/08/25/simpler-adc-with-mozzianalogread</id>
    <content type="html"><![CDATA[<p>Version 2013-08-25 evolves the adc developments of the previous release, by
replacing the various ways of reading analog inputs (adcGetResult(),
adcReadAllChannels(), etc.) with mozziAnalogRead(). Use it the same as
analogRead(). It doesn't need any special setup.</p>

<p>Audio input still uses getAudioInput(), not mozziAnalogRead().</p>

<p>Here's the Mozzi/extras/NEWS.txt entry of the changes in this release:</p>

<p>version 2013-08-25-18:38</p>

<ul>
<li>mozzi_analog.h - Much simpler, better analog input.  Now there's just mozziAnalogRead(pin).
  Sorry about breaking your sketches, again.
  mozziAnalogRead completely replaces the arduino analogRead, and analogRead is no longer able to be used with Mozzi.
  No setup is required for mozziAnalogRead, unless you want audio input, which is set in mozzi_config.h as before.
  You can still use setupFastAnalogRead(speed) if you want faster than mozzi's default,
  which is automatically set if you don't do anything.  See the documentation if you want this.
  If you specially need analogRead for some reason (and you're not using audio input), you can comment out a
  line in MozziGuts.cpp, in the startMozzi function, where it says setupMozziADC().</li>
<li>All example sketches using analog reads are updated, or removed where no longer relevant.</li>
<li>examples/04.Analog_Input changed to 04.Audio_Input</li>
<li>examples/envelopes/ADSR_Envelope - now plays random envelopes as a more thorough test/demo.</li>
<li>add examples/envelopes/ADSR_Envelope_x2 - shows an additive sound combining 2 oscillators with individual envelopes.</li>
<li>Sample.h - added linear interpolation as optional template parameter, eg.:
  Sample &lt;SAMPLE_NUM_CELLS, AUDIO_RATE, INTERP_LINEAR> aSample(SAMPLE_DATA);
  The default parameter is INTERP_NONE.</li>
<li>removed examples/08.Samples/Sample_Offset too horrible</li>
<li>added examples/08.Samples/Sample_Scrub...uses interpolation/smoothing at different scales</li>
<li>Smooth.h - added operator method as an alternative to next() so you can use
  mySmooth(input-value) instead of mySmooth.next(input-value), if you want.</li>
<li>mozzi_midi.h, .cpp - changed return type from unsigned int to int for mtof(unsigned char midi_note), mtof(int midi_note),
  to suit Oscil::setFreq()</li>
<li>added/corrected references to examples in docs</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Audio and Control ADC together]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2013/07/29/audio-and-control-adc-together/"/>
    <updated>2013-07-29T18:24:00+10:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2013/07/29/audio-and-control-adc-together</id>
    <content type="html"><![CDATA[<p>Version 2013-07-29-18:09 enables audio and control rate analog inputs to work at the same time.
Audio input is on analog pin A0.  Each time an audio sample is output, the audio input is sampled.
For each audio input sample, one control input is also converted, by changing the input channel and
triggering two conversions in a row using the ADC interrupt, keeping the second reading because the first
is unreliable, then switching the channel back to 0 again for audio input and starting another audio conversion, which
is also discarded.  Then the cycle goes again with the next audio output triggering a second, usable, audio input sample.
Each time, one control input is stored, until the list of analog channels waiting to be sampled is empty.
The audio samples continue alone until the next control interrupt, when a sketch has adcReadAllChannels() in updateControl().</p>

<p>You can test it with examples/04.Analog_Input/Audio_and_Control_Input and examples/04.Analog_Input/Audio_Input_with_Knob_Filter.</p>

<p>Also, now the Mozzi library downloads as Mozzi.zip and unzips as Mozzi, instead of sensorium-Mozzi-r4783rth43t or whatever.</p>

<p>The NEWS.txt entry for this release is:</p>

<ul>
<li>IMPORTANT: renamed RecentAverage.h to RollingAverage.h.  Update sketches accordingly.</li>
<li>mozzi_analog.h

<ul>
<li>added the ability to sample audio and control rate analog inputs at the same time</li>
<li>added options for setupFastAnalogRead(), default is FAST (adc clock div main clock by 16, same as previously),
  and setupFastAnalogRead(FASTER) and FASTEST for divide by 8 and divide by 4.  These faster rates risk being less accurate
(see docs for setupFastAnalogRead), but FASTER (or FASTEST) is required for audio input with control inputs at the same time.</li>
</ul>
</li>
<li>added examples/04.Analog_Input/Audio_and_Control_Input</li>
<li>added examples/04.Analog_Input/Audio_Input_with_Knob_Filter</li>
<li>removed examples/04.Analog_Input/Audio_Input_with_Filter_Control</li>
<li>RollingAverage.h - change unsigned char index to unsigned int and same for num_readings_as_rshift, so more than 255 items can be averaged</li>
<li>added audioTicks(), returns how many audio samples have been played since the program started - this will overflow less often than mozziMicros().</li>
<li>mozziMicros() was wrong, audioticks/us-per-tick... fixed, now audioticks*us-per-tick</li>
<li>added Stack.h, a simple stack class used internally for reading analog control inputs via adcReadAllChannels().</li>
<li>added RollingStat.h, which calculates an approximation of the variance and standard deviation for a window of recent inputs,
  for doing things with sensor inputs.</li>
</ul>

]]></content>
  </entry>
  
</feed>
