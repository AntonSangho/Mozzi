<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[MOZZI]]></title>
  <link href="http://sensorium.github.io/Mozzi//atom.xml" rel="self"/>
  <link href="http://sensorium.github.io/Mozzi//"/>
  <updated>2018-02-14T17:13:19+11:00</updated>
  <id>http://sensorium.github.io/Mozzi//</id>
  <author>
    <name><![CDATA[Tim Barrass]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MozziByte synth shield kickstarter launched]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2018/02/05/mozzibyte-synth-shield-kickstarter-launched/"/>
    <updated>2018-02-05T21:48:00+11:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2018/02/05/mozzibyte-synth-shield-kickstarter-launched</id>
    <content type="html"><![CDATA[<p>MozziByte, a shield for the Arduino Pro Mini.  <a href="https://www.kickstarter.com/projects/mozzibyte/mozzibyte-mozzi-arduino-mini-sensor-sonification-s">On kickstarter.</a></p>

<p>Making synths with Mozzi, we frequently use the same basic audio components and connectors, and putting them together every time is a pain.  So we&#8217;ve created the MozziByte.</p>

<p>MozziByte has an amp, phono socket, speaker pins, battery connector, power switch and prototyping area for connecting sensors, knobs, and switches.</p>

<p>We have to order a minimum of 100 MozziBytes to make it cost effective to produce as a PCB+assembly board.</p>

<p>If you would like to order a MozziByte and support our initial production run please <a href="https://www.kickstarter.com/projects/mozzibyte/mozzibyte-mozzi-arduino-mini-sensor-sonification-s">visit our Kickstarter</a> and share it with others who may be interested.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[v1.0.3rc6 HIFI works]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2017/04/04/v1-dot-0-3rc6-hifi-works/"/>
    <updated>2017-04-04T23:05:00+10:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2017/04/04/v1-dot-0-3rc6-hifi-works</id>
    <content type="html"><![CDATA[<p>HIFI actually works this time&#8230; ie. it&#8217;s unbroken</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[v1.0.3rc5 HIFI compile fix]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2017/03/12/v1-dot-0-3rc5-hifi-compile-fix/"/>
    <updated>2017-03-12T09:50:00+11:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2017/03/12/v1-dot-0-3rc5-hifi-compile-fix</id>
    <content type="html"><![CDATA[<p>HIFI sketches compile again. The problems were due to more errors around changes in Mozzi&#8217;s modified FrequencyTimer2 library usage which were not tested properly before release.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[v1.0.3rc4 fixes compile]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2017/01/16/v1-dot-0-3rc4-fixes-compile/"/>
    <updated>2017-01-16T15:10:00+11:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2017/01/16/v1-dot-0-3rc4-fixes-compile</id>
    <content type="html"><![CDATA[<p>Removed stray FrequencyTimer files from main folder, which stopped anything compiling&#8230;!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[v1.0.3rc2 Teensy bugfix]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2016/12/11/v1-dot-0-3rc2-teensy-bugfix/"/>
    <updated>2016-12-11T17:11:00+11:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2016/12/11/v1-dot-0-3rc2-teensy-bugfix</id>
    <content type="html"><![CDATA[<p>release v1.0.3rc2</p>

<ul>
<li>Teensy now compiles, bit of a hack added
  || defined(TEENSYDUINO)
  to all Teensy conditional compile lines like this:
  #if defined(<strong>MK20DX128</strong>) || defined(<strong>MK20DX256</strong>) || defined(TEENSYDUINO)  // teensy 3, 3.1</li>
<li>examples, removed commented ADC.h line from all examples, Teensy doesn&#8217;t seem to need it anymore</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tweak for faster code]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2016/11/26/tweak-for-faster-code/"/>
    <updated>2016-11-26T22:19:00+11:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2016/11/26/tweak-for-faster-code</id>
    <content type="html"><![CDATA[<hr />

<p>If you need your synth to run fast, Arduino versions above 1.5 can be tweaked to optimise compiled code for speed instead of small size.</p>

<p>Find Arduino’s platform.txt (on OSX you can find it by searching in Users/your_name/Library/Arduino15). Search and replace -Os with -O2. Save.</p>

<p>It’s explained more thoroughly (for Windows) <a href="http://www.instructables.com/id/Arduino-IDE-16x-compiler-optimisations-faster-code/?ALLSTEPS">here</a>.</p>

<p>Not sure where it is on Linux at the moment - but then you&#8217;d already know, wouldn&#8217;t you.</p>

<p>If you still need more, Arduino 1.0.5 produces slightly faster code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update 1.0.3rc1 available]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2016/11/26/update-1-dot-0-3rc1-available/"/>
    <updated>2016-11-26T22:16:00+11:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2016/11/26/update-1-dot-0-3rc1-available</id>
    <content type="html"><![CDATA[<p>release v1.0.3</p>

<p>Mostly bug fixes and maintainance, with update to suit Arduino 1.5+.  Though tests show the 1.0.5 IDE still produces faster code than any speed optimisation levels compiled with the newer versions.
- added library.properties for Arduino 1.5+
- MozziGuts.cpp and .h, and mozzi_config.h: added STEREO_HACK config option, set it to true to try stereo output, also added Stereo_Hack exammple
- README - updated install instructions
- examples/Mozzi_Midi_Input, added note about rx pin for midi in rather than tx as shown on Arduino page.
- ADSR.h - now IDLE phase will always return 0.
- included ADC.h for Teensy 3+ in mozzi_analog.h and removed it from sketches - not sure why this didn&#8217;t work before (maybe &lt;> instead of &#8220;&#8221;).
- python scripts sin1024_uint8.py and sin8192_uint8.py, changed broken int16_t casts to int, Might have accidentally changed in a global search/replace.
- examples - changed Sinwave_PWM_leds_HIFI to Sinwave_PWM_leds, can&#8217;t see any need for extra confusion of HFI
- examples - Detuned_Oscil_Wash - added note about compiling for speed, and that Arduino 1.0.5 still produces faster code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Howto for Arduino 1.6.11]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2016/09/09/howto-for-arduino-1-dot-6-11/"/>
    <updated>2016-09-09T21:48:00+10:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2016/09/09/howto-for-arduino-1-dot-6-11</id>
    <content type="html"><![CDATA[<p>Now Mozzi can work at full speed on the latest Arduino IDE.  It works, but now Mozzi needs an update to install smoothly in recent IDE&#8217;s.  Coming soon, with some other fixes.</p>

<p>The problem for Mozzi on Arduino IDE&#8217;s after 1.0.5 used to be that sketches were compiled for small size instead of speed, but now the compiler optimations can be edited.</p>

<p>Here&#8217;s how you do it.  Find Arduino&#8217;s platform.txt (on OSX you can find it by searching in Users/your_name/Library/Arduino15).  Search and replace -Os with -O2.  Save.</p>

<p>It&#8217;s explained more thoroughly (for Windows) here:
http://www.instructables.com/id/Arduino-IDE-16x-compiler-optimisations-faster-code/?ALLSTEPS</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Release v1.0.2]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2015/05/11/release-1-dot-0-2/"/>
    <updated>2015-05-11T21:02:00+10:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2015/05/11/release-1-dot-0-2</id>
    <content type="html"><![CDATA[<p>New version released, named Aedes australis, v1.0.2.</p>

<p>Updated 2015-05-11-20:23</p>

<p>First (slightly edited) versioned release using GitHub release process.</p>

<p>Warning: This release and all previous versions of Mozzi run slow when using Arduino IDE versions greater than 1.0.5, at least on OSX, causing glitches on many of the included examples. Simple examples run OK, but until this is resolved, Arduino 1.0.5 is recommended.</p>

<ul>
<li>Tweaks and fixes, a couple of new simple demos..</li>
<li>Fixed/updated python script for converting wavetables, fixed name back to char2mozzi.py</li>
<li>Updated MIDI examples for newer MIDI library.</li>
<li>Updated OverSample.h to take an additional termplate parameter to allow different numeric types.</li>
<li>Removed library.properties file until the library folder stucture is updated to match the new Arduino library form, as it stopped it installing in new IDEs.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Arduino 1.0.5]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2015/04/08/use-arduino-1-dot-0-5/"/>
    <updated>2015-04-08T21:52:00+10:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2015/04/08/use-arduino-1-dot-0-5</id>
    <content type="html"><![CDATA[<p>Mozzi is broken in Arduino IDE 1.0.6 and 1.6.3.  For now, use Arduino 1.0.5.</p>

<p>The symptom is that more complex sketches run too slowly for smooth audio synthesis.  I&#8217;ll try to sort it out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yes, you can donate!]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2014/11/21/yes/"/>
    <updated>2014-11-21T18:15:00+11:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2014/11/21/yes</id>
    <content type="html"><![CDATA[<p>Actually, I&#8217;m not asking for donations now&#8230;  But I am offering paid Mozzi <a href="http://sensorium.github.io/Mozzi//consulting/">consulting</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teensy 3.0/3.1 test release]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2014/08/09/teensy-3-dot-0-slash-3-dot-1-test-release-version-2014-08-09-14-15/"/>
    <updated>2014-08-09T21:21:00+10:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2014/08/09/teensy-3-dot-0-slash-3-dot-1-test-release-version-2014-08-09-14-15</id>
    <content type="html"><![CDATA[<p>This release is a test of the recent work on the Mozzi Teensy 3 port in response to the donation campaign reaching the grand goal of $1000.
Thankyou to all the dozen or so donors, especially my brother and sister, who donated more than half!</p>

<p>It should run as usual on the Arduinos already supported, and now also Teensy 3.0 and 3.1 (instructions for Teensies below).
I expect some mistakes and bugs so please let me know on the forum and I&#8217;ll try to sort them out asap.</p>

<p>Extra libraries required for use withTeensy 3.0/3.1:</p>

<ul>
<li><p><a href="https://github.com/loglow/IntervalTimer">Timer library for Teensy 3.0</a> by Daniel Gilbert</p></li>
<li><p><a href="http://github.com/pedvide/ADC">ADC library</a> by Pedro Villanueva</p></li>
</ul>


<p>Some of the differences for Teensy 3.0/3.1 which will affect users include:</p>

<ul>
<li><p>Audio output is on pin A14/DAC, in STANDARD or STANDARD_PLUS audio modes,  These modes are identical on Teensy 3.0/3.1, as
  the output is via DAC rather than PWM.</p></li>
<li><p>Output is 12 bits in STANDARD and STANDARD_PLUS modes, up from nearly 9 bits for Atmel based boards.
  HIFI audio, which works by summing two output pins, is not available on Teensy 3.0/3.1.</p></li>
<li><p>#include &lt;ADC.h> is required at the top of every Teensy 3.0/3.1 sketch.<br/>
  The examples come with this commented out, for Arduino compatibility.</p></li>
<li><p>Serial baud rate for monitoring in the IDE needs to be set to 9600 to work with Teensy 3.0/3.1.
  This slow rate can cause audio glitches.</p></li>
<li><p><a href="https://github.com/sensestage/Mozzi">twi_nonblock</a> code by Marije Baalman for non-blocking I2C is not compatible with Teensy 3.0/3.1.</p></li>
</ul>


<p>Various other changes which affect the library in general:</p>

<ul>
<li><p>Changed license from GPL3 to Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.</p></li>
<li><p>ADSR.h</p>

<ul>
<li><p>next() now returns unsigned char instead of unsigned int</p></li>
<li><p>added functions to set ADSR times in update steps, eg. setAttackUpdateSteps(unsigned int steps), etc.,
for finer-grained control</p></li>
</ul>
</li>
<li><p>SampleHuffman.h - now plays correctly from beginning when start() used before finished playing previous cycle.</p></li>
<li><p>Re-included RCpoll.h and examples>03.Sensors>RCpoll, for capacitive sensing.<br/>
  They have been included before, but disappeared somewhere along the way.</p></li>
<li><p>Added PDResonant.h, and examples>06.Synthesis>PDResonant.  PDResonant is a simple midi intrument which demonstrates
  Phase Distortion used to create a sweeping resonant filter effect, based on
  https://en.wikipedia.org/wiki/Phase_distortion_synthesis.</p></li>
<li><p>mozzi_fixmath.h - added Q15n16_to_Q8n0()</p></li>
<li><p>Fixed broken link in Sensor examples to http://sensorium.github.io/Mozzi/learn/introductory-tutorial/</p></li>
<li><p>Moved Arduino timer libraries into &#8220;utility&#8221; folder and added conditional compilation to hide them from Teensy 3.0/3.1 compilation.</p></li>
<li><p>Removed cpu speed warning from MozziGuts.h</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teensy 3.0-3.1 port progress]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2014/06/20/teensy-3-dot-0-3-dot-1-port-progress/"/>
    <updated>2014-06-20T21:30:00+10:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2014/06/20/teensy-3-dot-0-3-dot-1-port-progress</id>
    <content type="html"><![CDATA[<p>This is an update regarding work in progress on the port to Teensy 3.0 and 3.1,
to let donors to the project know where the work is up to.  It&#8217;s taking a bit longer than anticipated,
but I want to assure people who are waiting that the work is well underway.  However, I won&#8217;t be able to
spend time on the port for the next couple of weeks, so the wait is going to be a bit longer yet.
I&#8217;m aiming to finish it in the second half of July.</p>

<p>Where it&#8217;s at:<br/>
Most of the demo sketches work, but HIFI output and some functions haven&#8217;t been implemented yet.
Audio output on pin A14/DAC, in STANDARD or STANDARD_PLUS audio modes - these are identical on the Teensy 3 series as
the output is via DAC rather than PWM.  Non-blocking mozziAnalogRead() is implemented using the excellent ADC library
created by Pedro Villanueva, which be downloaded from https://github.com/pedvide/ADC.
The ADC library is only being used very simply in the initial Mozzi port, but it opens the way to fine control
of ADC in future development.  Audio input hasn&#8217;t been tested yet.</p>

<p>Some of the changes at this time which will affect users include:<br/>
- #include &lt;ADC.h> is required at the top of every Teensy 3.0/3.1 sketch.<br/>
- uint8_t and int8_t are used instead of unsigned char and char, where char etc. don&#8217;t work with Teensy 3.0/3.1.<br/>
- Serial baud rate for monitoring in the IDE needs to be set to 9600.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[STANDARD_PLUS performance improves]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2014/04/20/standard-plus-performance-improves/"/>
    <updated>2014-04-20T15:16:00+10:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2014/04/20/standard-plus-performance-improves</id>
    <content type="html"><![CDATA[<p>Due to recent improvements in output buffer code, STANDARD_PLUS audio mode is now the default, and performs as well as the old STANDARD mode,
while removing the high-pitched PWM carrier frequency whine out of hearing range.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New STANDARD_PLUS audio mode removes 16kHz whine]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2014/03/13/update-to-version-2014-03-13-14-09/"/>
    <updated>2014-03-13T14:16:00+11:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2014/03/13/update-to-version-2014-03-13-14-09</id>
    <content type="html"><![CDATA[<p>Took a long time coming&#8230;</p>

<p>version 2014-03-13-14:09</p>

<ul>
<li>MozziGuts.cpp/h,mozzi_config.h - Added STANDARD_PLUS audio mode.   This is now the default audio mode.
  Just like STANDARD, but with 32768Hz PWM rate, so the whine which some people hear in STANDARD mode is now out of hearing range.
  A notch filter is not required for STANDARD_PLUS output.
  STANDARD_PLUS introduces a slight performance penalty over STANDARD mode, but works for most of the Mozzi demo examples.
  I recommend it for general use, with a fall back to STANDARD for more demanding sketches.
  HIFI mode is unchanged, but is being revised to address broad-spectrum noise/distortion issues in this mode.</li>
<li>TimerOne.h - changed initialize(usecs) to choice of initializeMicroseconds(usecs) or initializeCPUCycles(cycles),
  providing the finer resolution required for the PWM rate increase.</li>
<li>FrequencyTimer2.cpp - changed setPeriod to setPeriodMicroSeconds() and added setPeriodCPUCycles().</li>
<li>examples/02.Control/Line_Gliss_Double_32k_HIFI - changed &#8220;warmtriangle&#8221; wave to saw and changed one of the oscils up an octave.  Molto Aggressivo.  Almost.</li>
<li>examples/10.Audio_Filters/StateVariableFilter - changed some floats which were supposed to be ints</li>
<li>StateVariable.h - removed a clicking sound heard in some situations, thanks to diligent problem-finding by qwester1 on github.  Cheers qwester1.<br/>
The centre frequency calculation is still extremely approximate.  Needs more work.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Things Purr, Growl and Sing - Mozzi workshop in Melbourne]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2014/03/06/making-things-purr/"/>
    <updated>2014-03-06T17:50:00+11:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2014/03/06/making-things-purr</id>
    <content type="html"><![CDATA[<p>We will be running a Mozzi synth workshop in Melbourne on Thursday 20th March, 14:00-20:00.</p>

<p>Participants will get a grip on Mozzi, and have a chance to work on their own projects, with help from me (Tim, the creator of Mozzi) and my brother Stephen Barrass (a media arts researcher and teacher).</p>

<p>Location: Kindred Studios, 212A Whitehall St, Yarraville</p>

<p>Limit of 10 Participants</p>

<p>Cost $90 ­ includes <a href="https://mozzi.sharetribe.com/en/listings/38888-mozzi-noob-kits">Mozzi Noob kit</a></p>

<p>Register via <a href="https://mozzi.sharetribe.com/en/listings/42804-mozzi-arduino-synth-workshop--melbourne">Sharetribe</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mozzi Marketplace on Sharetribe]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2013/12/31/mozzi-marketplace-on-sharetribe/"/>
    <updated>2013-12-31T19:22:00+11:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2013/12/31/mozzi-marketplace-on-sharetribe</id>
    <content type="html"><![CDATA[<p>We (well, me and my brother Steph) are experimenting with the idea of a Mozzi marketplace where people can sell or swap things made with Mozzi.  The first test is with <a href="https://mozzi.sharetribe.com">Sharetribe</a>.</p>

<p>We hope a marketplace will help ferment the Mozzi culture, but also there&#8217;s a remote thought of generating some kind of income to support the development of Mozzi.</p>

<p>First up is the <a href="https://mozzi.sharetribe.com/en/listings/38888-mozzi-noob-kits">Mozzi Noob Kit</a> with everything you need to do the Mozzi Introductory Tutorial.</p>

<p>Anyone can post a listing on the Mozzi marketplace.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simpler adc with mozziAnalogRead]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2013/08/25/simpler-adc-with-mozzianalogread/"/>
    <updated>2013-08-25T21:20:00+10:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2013/08/25/simpler-adc-with-mozzianalogread</id>
    <content type="html"><![CDATA[<p>Version 2013-08-25 evolves the adc developments of the previous release, by
replacing the various ways of reading analog inputs (adcGetResult(),
adcReadAllChannels(), etc.) with mozziAnalogRead(). Use it the same as
analogRead(). It doesn&#8217;t need any special setup.</p>

<p>Audio input still uses getAudioInput(), not mozziAnalogRead().</p>

<p>Here&#8217;s the Mozzi/extras/NEWS.txt entry of the changes in this release:</p>

<p>version 2013-08-25-18:38</p>

<ul>
<li>mozzi_analog.h - Much simpler, better analog input.  Now there&#8217;s just mozziAnalogRead(pin).
  Sorry about breaking your sketches, again.
  mozziAnalogRead completely replaces the arduino analogRead, and analogRead is no longer able to be used with Mozzi.
  No setup is required for mozziAnalogRead, unless you want audio input, which is set in mozzi_config.h as before.
  You can still use setupFastAnalogRead(speed) if you want faster than mozzi&#8217;s default,
  which is automatically set if you don&#8217;t do anything.  See the documentation if you want this.
  If you specially need analogRead for some reason (and you&#8217;re not using audio input), you can comment out a
  line in MozziGuts.cpp, in the startMozzi function, where it says setupMozziADC().</li>
<li>All example sketches using analog reads are updated, or removed where no longer relevant.</li>
<li>examples/04.Analog_Input changed to 04.Audio_Input</li>
<li>examples/envelopes/ADSR_Envelope - now plays random envelopes as a more thorough test/demo.</li>
<li>add examples/envelopes/ADSR_Envelope_x2 - shows an additive sound combining 2 oscillators with individual envelopes.</li>
<li>Sample.h - added linear interpolation as optional template parameter, eg.:
  Sample &lt;SAMPLE_NUM_CELLS, AUDIO_RATE, INTERP_LINEAR> aSample(SAMPLE_DATA);
  The default parameter is INTERP_NONE.</li>
<li>removed examples/08.Samples/Sample_Offset too horrible</li>
<li>added examples/08.Samples/Sample_Scrub&#8230;uses interpolation/smoothing at different scales</li>
<li>Smooth.h - added operator method as an alternative to next() so you can use
  mySmooth(input-value) instead of mySmooth.next(input-value), if you want.</li>
<li>mozzi_midi.h, .cpp - changed return type from unsigned int to int for mtof(unsigned char midi_note), mtof(int midi_note),
  to suit Oscil::setFreq()</li>
<li>added/corrected references to examples in docs</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upcoming Mozzi talk at ICMC2013 in Perth]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2013/08/06/upcoming-mozzi-talk-at-icmc2013-in-perth/"/>
    <updated>2013-08-06T17:34:00+10:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2013/08/06/upcoming-mozzi-talk-at-icmc2013-in-perth</id>
    <content type="html"><![CDATA[<p>There&#8217;ll be a conference presentation about Mozzi as part of <a href="http://icmc2013.com.au/program/">ICMC</a> in Perth.
The paper will be on Thursday 15 August, 14:15 – 16:15, State Theatre Centre – Studio Underground.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Audio and Control ADC together]]></title>
    <link href="http://sensorium.github.io/Mozzi//blog/2013/07/29/audio-and-control-adc-together/"/>
    <updated>2013-07-29T18:24:00+10:00</updated>
    <id>http://sensorium.github.io/Mozzi//blog/2013/07/29/audio-and-control-adc-together</id>
    <content type="html"><![CDATA[<p>Version 2013-07-29-18:09 enables audio and control rate analog inputs to work at the same time.
Audio input is on analog pin A0.  Each time an audio sample is output, the audio input is sampled.
For each audio input sample, one control input is also converted, by changing the input channel and
triggering two conversions in a row using the ADC interrupt, keeping the second reading because the first
is unreliable, then switching the channel back to 0 again for audio input and starting another audio conversion, which
is also discarded.  Then the cycle goes again with the next audio output triggering a second, usable, audio input sample.
Each time, one control input is stored, until the list of analog channels waiting to be sampled is empty.
The audio samples continue alone until the next control interrupt, when a sketch has adcReadAllChannels() in updateControl().</p>

<p>You can test it with examples/04.Analog_Input/Audio_and_Control_Input and examples/04.Analog_Input/Audio_Input_with_Knob_Filter.</p>

<p>Also, now the Mozzi library downloads as Mozzi.zip and unzips as Mozzi, instead of sensorium-Mozzi-r4783rth43t or whatever.</p>

<p>The NEWS.txt entry for this release is:</p>

<ul>
<li>IMPORTANT: renamed RecentAverage.h to RollingAverage.h.  Update sketches accordingly.</li>
<li>mozzi_analog.h

<ul>
<li>added the ability to sample audio and control rate analog inputs at the same time</li>
<li>added options for setupFastAnalogRead(), default is FAST (adc clock div main clock by 16, same as previously),
  and setupFastAnalogRead(FASTER) and FASTEST for divide by 8 and divide by 4.  These faster rates risk being less accurate
(see docs for setupFastAnalogRead), but FASTER (or FASTEST) is required for audio input with control inputs at the same time.</li>
</ul>
</li>
<li>added examples/04.Analog_Input/Audio_and_Control_Input</li>
<li>added examples/04.Analog_Input/Audio_Input_with_Knob_Filter</li>
<li>removed examples/04.Analog_Input/Audio_Input_with_Filter_Control</li>
<li>RollingAverage.h - change unsigned char index to unsigned int and same for num_readings_as_rshift, so more than 255 items can be averaged</li>
<li>added audioTicks(), returns how many audio samples have been played since the program started - this will overflow less often than mozziMicros().</li>
<li>mozziMicros() was wrong, audioticks/us-per-tick&#8230; fixed, now audioticks*us-per-tick</li>
<li>added Stack.h, a simple stack class used internally for reading analog control inputs via adcReadAllChannels().</li>
<li>added RollingStat.h, which calculates an approximation of the variance and standard deviation for a window of recent inputs,
  for doing things with sensor inputs.</li>
</ul>

]]></content>
  </entry>
  
</feed>
